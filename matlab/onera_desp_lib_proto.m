function [methodinfo,structs,enuminfo,ThunkLibName]=onera_desp_lib_proto
%ONERA_DESP_LIB_PROTO Create structures to define interfaces found in 'onera_desp_lib'.

%This function was generated by loadlibrary.m parser version 1.1.6.24 on Wed Apr  1 12:00:55 2009
%perl options:'onera_desp_lib.i -outfile=onera_desp_lib_proto.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% void make_lstar1_ ( long int * ntime , long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * J , double * MLT ); 
fcns.name{fcnNum}='make_lstar1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void make_lstar_shell_splitting1_ ( long int * ntime , long int * Nipa , long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * alpha , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * J , double * MLT ); 
fcns.name{fcnNum}='make_lstar_shell_splitting1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void drift_shell1_ ( long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * J , double * posit , long int * ind ); 
fcns.name{fcnNum}='drift_shell1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
% void drift_bounce_orbit1_ ( long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * alpha , double * maginput , double * Lm , double * Lstar , double * Blocal , double * Bmin , double * Bmir , double * J , double * posit , long int * ind ); 
fcns.name{fcnNum}='drift_bounce_orbit1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
% void trace_field_line1_ ( long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Lm , double * Blocal , double * Bmin , double * J , double * posit , long int * ind ); 
fcns.name{fcnNum}='trace_field_line1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
% void get_field1_ ( long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Bgeo , double * B ); 
fcns.name{fcnNum}='get_field1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void find_mirror_point1_ ( long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * alpha , double * maginput , double * Blocal , double * Bmirror , double * xGEO ); 
fcns.name{fcnNum}='find_mirror_point1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void find_foot_point1_ ( long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * stop_alt , long int * hemi_flag , double * maginput , double * xfoot , double * Bfoot , double * Bfootmag ); 
fcns.name{fcnNum}='find_foot_point1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void get_hemi1_ ( long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , long int * xHEMI ); 
fcns.name{fcnNum}='get_hemi1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
% void find_magequator1_ ( long int * kext , long int * options , long int * sysaxes , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * maginput , double * Bmin , double * xGEO ); 
fcns.name{fcnNum}='find_magequator1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void get_mlt1_ ( long int * iyr , long int * idoy , double * UT , double * xGEO , double * MLT ); 
fcns.name{fcnNum}='get_mlt1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void fly_in_nasa_aeap1_ ( long int * ntime , long int * sysaxes , long int * whichm , long int * whatf , long int * Nene , double * energy , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * flux ); 
fcns.name{fcnNum}='fly_in_nasa_aeap1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void get_ae8_ap8_flux_ ( long int * ntime , long int * whichm , long int * whatf , long int * Nene , double * energy , double * BBo , double * L , double * flux ); 
fcns.name{fcnNum}='get_ae8_ap8_flux_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void fly_in_afrl_crres1_ ( long int * ntime , long int * sysaxes , long int * whichm , long int * whatf , long int * nene , double * energy , long int * iyear , long int * idoy , double * UT , double * x1 , double * x2 , double * x3 , double * Ap15 , double * flux , char * ascii_path , long int * strlen ); 
fcns.name{fcnNum}='fly_in_afrl_crres1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% void get_crres_flux_ ( long int * ntime , long int * whichm , long int * whatf , long int * nene , double * energy , double * BBo , double * L , double * Ap15 , double * flux , char * ascii_path , long int * strlen ); 
fcns.name{fcnNum}='get_crres_flux_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% void sgp4_tle1_ ( long int * runtype , double * startsfe , double * stopsfe , double * deltasec , char * InFileByte , long int * strlenIn , char * OutFileByte , long int * strlenOut ); 
fcns.name{fcnNum}='sgp4_tle1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'longPtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% void sgp4_ele1_ ( long int * sysaxes , long int * Yr , long int * Mon , long int * Day , long int * Hr , long int * Minute , double * Sec , double * e1 , double * e2 , double * e3 , double * e4 , double * e5 , double * e6 , long int * ele_opts , double * startsfe , double * stopsfe , double * deltasec , long int * outYr , long int * outDoy , double * outSec , double * x1 , double * x2 , double * x3 ); 
fcns.name{fcnNum}='sgp4_ele1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void coord_trans_vec1_ ( long int * ntime , long int * sysaxesIN , long int * sysaxesOUT , long int * iyr , long int * idoy , double * secs , double * xINV , double * xOUTV ); 
fcns.name{fcnNum}='coord_trans_vec1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void rv2coe_ ( double * R , double * V , double * P , double * A , double * Ecc , double * Incl , double * Omega , double * Argp , double * Nu , double * M , double * ArgLat , double * TrueLon , double * LonPer ); 
fcns.name{fcnNum}='rv2coe_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void fly_in_ige1_ ( long int * launch_year , long int * duration , long int * whichm , long int * whatf , long int * nene , double * energy , double * Lower_flux , double * Mean_flux , double * Upper_flux ); 
fcns.name{fcnNum}='fly_in_ige1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void fly_in_meo_gnss1_ ( long int * launch_year , long int * duration , long int * whichm , long int * whatf , long int * nene , double * energy , double * Lower_flux , double * Mean_flux , double * Upper_flux ); 
fcns.name{fcnNum}='fly_in_meo_gnss1_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void nrlmsise00_ ( long int * ntime , long int * whichAp , long int * DOY , double * UT , double * ALT , double * LAT , double * LON , double * F107A , double * F107 , double * AP , double * Dens , double * Temp ); 
fcns.name{fcnNum}='nrlmsise00_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void msise90_ ( long int * ntime , long int * whichAp , long int * DOY , double * UT , double * ALT , double * LAT , double * LON , double * F107A , double * F107 , double * AP , double * Dens , double * Temp ); 
fcns.name{fcnNum}='msise90_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void msis86_ ( long int * ntime , long int * whichAp , long int * DOY , double * UT , double * ALT , double * LAT , double * LON , double * F107A , double * F107 , double * AP , double * Dens , double * Temp ); 
fcns.name{fcnNum}='msis86_'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'longPtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
methodinfo=fcns;